{
  "type": "v1",
  "root": 0,
  "definitions": [
    {
      "name": "ibc_reflect_send_msg_AccountInfo",
      "type": "struct",
      "properties": {
        "channel_id": {
          "value": 1
        },
        "last_update_time": {
          "description": "last block balance was updated (0 is never)",
          "value": 2
        },
        "remote_addr": {
          "description": "in normal cases, it should be set, but there is a delay between binding\nthe channel and making a query and in that time it is empty",
          "value": 3
        },
        "remote_balance": {
          "value": 6
        }
      }
    },
    {
      "name": "String",
      "type": "string"
    },
    {
      "name": "cosmwasm_std_timestamp_Timestamp",
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n```\n# use cosmwasm_std::Timestamp;\nlet ts = Timestamp::from_nanos(1_000_000_202);\nassert_eq!(ts.nanos(), 1_000_000_202);\nassert_eq!(ts.seconds(), 1);\nassert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2);\nassert_eq!(ts.nanos(), 3_000_000_202);\nassert_eq!(ts.seconds(), 3);\nassert_eq!(ts.subsec_nanos(), 202);\n```",
      "type": "timestamp"
    },
    {
      "name": "core::option::Option<alloc::string::String>",
      "type": "optional",
      "inner": 1
    },
    {
      "name": "cosmwasm_std_coin_Coin",
      "type": "struct",
      "properties": {
        "amount": {
          "value": 5
        },
        "denom": {
          "value": 1
        }
      }
    },
    {
      "name": "cosmwasm_std_math_uint128_Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding,\nsuch that the full u128 range can be used for clients that convert JSON numbers to floats,\nlike JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n```\n# use cosmwasm_std::Uint128;\nlet a = Uint128::from(123u128);\nassert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64);\nassert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32);\nassert_eq!(c.u128(), 70);\n```",
      "type": "integer",
      "precision": 128,
      "signed": false
    },
    {
      "name": "alloc::vec::Vec<cosmwasm_std::coin::Coin>",
      "type": "array",
      "items": 4
    }
  ]
}
