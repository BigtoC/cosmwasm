{
  "type": "v1",
  "root": 0,
  "definitions": [
    {
      "name": "hackatom_msg_SudoMsg",
      "description": "SudoMsg is only exposed for internal Cosmos SDK modules to call.\nThis is showing how we can expose \"admin\" functionality than can not be called by\nexternal users or contracts, but only trusted (native/Go) code in the blockchain",
      "type": "enum",
      "cases": {
        "steal_funds": {
          "type": "named",
          "properties": {
            "amount": {
              "value": 4
            },
            "recipient": {
              "value": 1
            }
          }
        }
      }
    },
    {
      "name": "String",
      "type": "string"
    },
    {
      "name": "cosmwasm_std_coin_Coin",
      "type": "struct",
      "properties": {
        "amount": {
          "value": 3
        },
        "denom": {
          "value": 1
        }
      }
    },
    {
      "name": "cosmwasm_std_math_uint128_Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding,\nsuch that the full u128 range can be used for clients that convert JSON numbers to floats,\nlike JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n```\n# use cosmwasm_std::Uint128;\nlet a = Uint128::from(123u128);\nassert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64);\nassert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32);\nassert_eq!(c.u128(), 70);\n```",
      "type": "integer",
      "precision": 128,
      "signed": false
    },
    {
      "name": "alloc::vec::Vec<cosmwasm_std::coin::Coin>",
      "type": "array",
      "items": 2
    }
  ]
}
