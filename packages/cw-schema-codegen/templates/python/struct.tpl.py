# This code is @generated by cw-schema-codegen. Do not modify this manually.

/**
{% for doc in docs %}
    * {{ doc }}
{% endfor %}
 */

type {{ name }} = 
{% match ty %}
    {% when TypeTemplate::Unit %}
        void
    {% when TypeTemplate::Tuple with (types) %}
        [{{ types|join(", ") }}]
    {% when TypeTemplate::Named with { fields } %}
        {
            {% for field in fields %}
                /**
                {% for doc in field.docs %}
                    * {{ doc }}
                {% endfor %}
                 */

                {{ field.name }}: {{ field.ty }};
            {% endfor %}
        }
{% endmatch %}



# This code is @generated by cw-schema-codegen. Do not modify this manually.
from dataclasses import dataclass, field
from dataclasses_json import dataclass_json, config
from typing import Optional, Iterable

@dataclass_json
@dataclass
class {{ name }}:
    '''{% for doc in docs %}
    {{ doc }}
    {% endfor %}'''

    {% match ty %}
        {% when TypeTemplate::Unit %}
            pass
        {% when TypeTemplate::Tuple with (types) %}
            {{ variant.name }}: tuple[{{ types|join(", ") }}]
        {% when TypeTemplate::Named with { fields } %}
            {% for field in fields %}
                '''{% for doc in field.docs %}
                # {{ doc }}
                {% endfor %}'''
                {{ field.name }}: {{ field.ty }}
            {% endfor %}
    {% endmatch %}
